注意：使用 AutoHotkey_L Unicode 程序时脚本必须保存为 UTF-8 编码，
脚本默认编码都使用 ANSI（所以 UTF-8 编码的脚本必须包含 BOM 头部才能被正确识别）。
建议保存为 UTF-8 带 BOM 编码，这样才不会在执行时出现编码问题。
一般情况下建议脚本文件使用 ANSI 或 UTF-8 BOM（注意必须加上 BOM）编码，这样一般情况下脚本文件都能正常加载，但下列两种情况中必须使用 UTF-8 BOM 编码，否则脚本加载或执行时会出问题：
◦脚本文件中包含多种非 ANSI 编码字符集的字符，如同时包含简体中文和俄文；
◦脚本可能在不同默认代码页的系统中执行，例如在简体中文系统和日文系统；

INI 文件编码
IniRead 和 IniWrite 总是使用 UTF-16 或系统默认代码页，即除了 UTF-16 编码（通过 BOM 判断）外，其他所有情况都被视为系统默认编码。
原理： IniRead 和 IniWrite 依靠外部函数 GetPrivateProfileString 和 WritePrivateProfileString 来读取和写入值，这些函数仅支持 UTF-16 编码的 Unicode 文件，其他所有文件都被认为使用系统默认代码页。

-------------------------------------------------------------------------------

这几个按键只有在作为修饰键时才使用相应的符号表示，在热键中作为普通触发键使用时则必须使用按键名称，例如 Ctrl+Shift 应表示成 ^Shift，而 Ctrl 则表示成 Ctrl（这里只是举例，实际上这种单独作为触发键的情况容易和组合键冲突，很少使用）。 
这几个按键单独作为热键的触发键时，在弹起时才会触发热键操作，而普通按键是在按下时触发的。 

-------------------------------------------------------------------------------
热键变体是指同一个脚本中相同方式创建、不同作用范围的且触发键相同的多个热键。在一个脚本中有两种方式创建热键：双冒号标签和 Hotkey 命令。

多个热键变体的优先级顺序：局部变体优先于全局变体，多个局部热键变体的优先级顺序由创建顺序决定（根据创建的先后顺序从高到低）。
-------------------------------------------------------------------------------

其他的窗口命令 (例如 WinActivate 和 IfWinExist) 只对组中的顶层窗口进行操作.

-------------------------------------------------------------------------------

要在函数中引用现有的全局变量 (或创建新的), 需要在使用前声明此变量为全局的
musume = "Asamiyuma"
fun()
{
		global musume
}
-------------------------------------------------------------------------------

WinTitle
标题 					匹配行为 
A						 	活动窗口 
ahk_class 		窗口类 
ahk_id 				唯一 ID/HWND 
ahk_pid 			进程 ID 
ahk_exe 			进程名称,路径 
ahk_group 		窗口组 
  						多重条件 
(都为空) 			上次找到的窗口 	省略所有的四个窗口参数 (WinTitle, WinText, ExcludeTitle 和 ExcludeText).

窗口标题和文本是区分大小写的

如果 WinTitle 为字母 A 且其他三个窗口参数(WinText,ExcludeTitle 和 ExcludeText)都为空或省略,则使用活动窗口.

每个窗口或控件都含有唯一 ID,也称为 HWND (即窗口句柄的缩写).即使在窗口或控件的标题改变时也可用这个 ID 来识别它.

超过一个条件时条件之间必须准确地用一个空格或 tab 分隔 (其他任何空格或 tab 会被视为前面一个条件的文字部分).

"上次找到的" 窗口可以用于除 WinWait, WinActivateBottom 和 GroupAdd 以外的所有窗口命令. 要使用它, 只需简单地省略所有的四个窗口参数 (WinTitle, WinText, ExcludeTitle 和 ExcludeText).
WinActivate  ; 使用上次找到的窗口.
-------------------------------------------------------------------------------

住或重复一个按键 
要重复一个键击: 将按键名称后跟要重复次数的数字括入大括号。例如：


Send {DEL 4}  ; 按 4 次 Delete 键。
Send {S 30}   ; 发送大写 S 字符 30 次。
Send +{TAB 4}  ; 按 4 次 Shift-Tab 。要按住或松开一个按键: 将按键名称后跟单词 Down 或 Up 括入大括号。例如：

Send {b down}{b up}Send {TAB down}{TAB up}Send {Up down}  ; 按下向上的箭头键
Sleep 1000  ; 将它按住 1 秒。
Send {Up up}  ; 松开向上的箭头键。 

send,					;发送超长文本时保证文本的可读性
(
Line 1
Line 2
Apples are a fruit.
)

-------------------------------------------------------------------------------

列出文件列表中内容
ControlGet, OutputVar, List, , SysListView321, 打开程序
Loop, Parse, OutputVar, `n  ; 行之间由换行符 (`n) 分隔.
{
		RowNumber := A_Index
		Loop, Parse, A_LoopField, %A_Tab%  ; 每行中的字段 (列) 之间由 tab (A_Tab) 分隔.
    MsgBox Row #%RowNumber% Col #%A_Index% is %A_LoopField%.
}
-------------------------------------------------------------------------------
~j::							;激发热键时, 不会屏蔽(被操作系统隐藏)热键中按键原有的功能
	send, ack
return

:*:def::define		;不用输入回车或空格键自动转化

-------------------------------------------------------------------------------
热键或热字串只在某些特定窗口上工作(或禁用). 你可以使用#指令.
	#IfWinActive ...
		........
		return
	#IfWinActive  ;想要关闭上下文敏感, 需要将 #ifwin 的所有参数设置成空

	#IfWinExist
-------------------------------------------------------------------------------
执行命令行
runwait , %comspec% /c dir d:\ > b.txt && b.txt
-------------------------------------------------------------------------------
命令: 使用"传统语法". 你需要在参数的前后加上%, 比如%variable%. 而文本和数字则不需要加双引号. 
		msgbox aaa

函数: 文本前后需要加上双引号,参数前后不需要加上百分号.
		SubStr("I'm scripting, awesome!", 16) 

-------------------------------------------------------------------------------

用百分号: 1.当你使用命令时(见前文), 需要使用百分号.
-- 输入变量和输出变量除外.
2.当你使用传统模式(等号前面没有其它符号)给一个变量赋值时, 需要使用百分号.

-------------------------------------------------------------------------------
任何想在脚本启动时立即执行的行都应该出现在脚本的顶部, 要在首个 热键, 热字串 或 Return 之前
-------------------------------------------------------------------------------
也可以在命令的末尾添加注释';', 此时分号左侧必须至少有一个空格或 tab. 例如:

可以使用 /* 和 */ 符号注释整块代码, 但仅当它们出现在行首时才有效, 例如:
没有使用 注释选项 时, 不支持在延续片段中使用分号和 /*..*/ 添加注释, 因为它们会被视为原义文本. 不过, 可以在片段的底行和顶行添加注释. 例如:
FileAppend,   ; 注释.
; 注释.
( LTrim Join    ; 注释.
     ; This is not a comment; it is literal. Include the word Comments in the line above to make it a comment.
), C:\File.txt   ; 注释.
FileAppend 的最后一个参数. 这种做法是可选的; 这样做是为了确保逗号被视为参数分隔符而不是原义的逗号.
-------------------------------------------------------------------------------
MsgBox % "The value in the variable named Var is " . Var . "."  ; 使用句点连接 (join 拼接) 两个字符串.
CopyOfVar := Var
在上面的 MsgBox 这行, 通过使用百分号和空格把参数从传统模式改变为表达式模式. 因为所有的命令默认情况下使用传统模式 (除了另外注明的那些), 所以这是必须的.
-------------------------------------------------------------------------------
从 v1.0.48+ 开始, 使用逗号运算符常常比分开写单独的表达式速度更快, 尤其是把一个变量的值赋给另一个变量时 (例如: x:=y, a:=b). 当越多的表达式联合成单个表达式时, 性能会持续得到提升; 例如, 把五个或十个简单的表达式联合成单个表达式速度可能提升 35%.
-------------------------------------------------------------------------------
在 %Var%() 中的 Var 可包含函数名
-------------------------------------------------------------------------------
•进行逻辑运算时对象总是被视为 true, 例如在 if obj, !obj 或 obj ? x : y 中.

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------